---
# Master playbook for Kubernetes cluster setup
- name: Setup Kubernetes prerequisites on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install common dependencies
      apt:
        name:
          - git
          - wget
          - curl
          - socat
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: ./docker.key
        mode: '0644'

    - name: Import Docker GPG key
      shell: |
        gpg --no-default-keyring --keyring ./docker.gpg --import ./docker.key
        gpg --no-default-keyring --keyring ./docker.gpg --export > ./docker-archive-keyring.gpg
        mv ./docker-archive-keyring.gpg /etc/apt/trusted.gpg.d/

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Install cri-dockerd
      block:
        - name: Get latest cri-dockerd version
          shell: curl -s https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/v//g'
          register: cri_dockerd_version
          changed_when: false

        - name: Download cri-dockerd
          get_url:
            url: "https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version.stdout }}/cri-dockerd-{{ cri_dockerd_version.stdout }}.amd64.tgz"
            dest: "/tmp/cri-dockerd-{{ cri_dockerd_version.stdout }}.amd64.tgz"

        - name: Extract cri-dockerd
          unarchive:
            src: "/tmp/cri-dockerd-{{ cri_dockerd_version.stdout }}.amd64.tgz"
            dest: /tmp
            remote_src: yes

        - name: Move cri-dockerd binary
          copy:
            src: /tmp/cri-dockerd/cri-dockerd
            dest: /usr/local/bin/cri-dockerd
            mode: '0755'
            remote_src: yes

        - name: Download cri-docker service file
          get_url:
            url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
            dest: /etc/systemd/system/cri-docker.service
            mode: '0644'

        - name: Download cri-docker socket file
          get_url:
            url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
            dest: /etc/systemd/system/cri-docker.socket
            mode: '0644'

        - name: Update cri-docker service path
          replace:
            path: /etc/systemd/system/cri-docker.service
            regexp: '/usr/bin/cri-dockerd'
            replace: '/usr/local/bin/cri-dockerd'

        - name: Enable cri-docker service and socket
          systemd:
            name: "{{ item }}"
            daemon_reload: yes
            enabled: yes
            state: started
          loop:
            - cri-docker.socket
            - cri-docker.service

    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
      args:
        creates: /etc/apt/sources.list.d/kubernetes.list

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold Kubernetes and Docker packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - docker-ce
        - kubelet
        - kubeadm
        - kubectl

    - name: Configure kernel modules for k8s
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'

    - name: Load kernel modules
      shell: |
        modprobe overlay
        modprobe br_netfilter
      changed_when: false

    - name: Configure sysctl for k8s
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        mode: '0644'

    - name: Apply sysctl parameters
      command: sysctl --system
      changed_when: false

    - name: Disable swap
      command: swapoff -a
      changed_when: false

    - name: Disable swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s+.*)$'
        replace: '# \1'

- name: Initialize Kubernetes master node
  hosts: master
  become: yes
  vars:
    pod_network_cidr: 192.244.0.0/16  # Change to 10.244.0.0/16 if node network is 192.168.x.x
  tasks:
    - name: Get master node IP
      shell: hostname -I | awk '{print $1}'
      register: master_ip
      changed_when: false

    - name: Initialize Kubernetes cluster
      shell: >
        kubeadm init 
        --apiserver-advertise-address={{ master_ip.stdout }} 
        --cri-socket unix:///var/run/cri-dockerd.sock 
        --pod-network-cidr={{ pod_network_cidr }}
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Print join command
      debug:
        msg: "{{ kubeadm_init.stdout_lines }}"
      when: kubeadm_init.changed

    - name: Extract join command
      shell: kubeadm token create --print-join-command
      register: join_command
      changed_when: false
      when: kubeadm_init.changed

    - name: Save join command to a file
      copy:
        content: "{{ join_command.stdout }} --cri-socket unix:///var/run/cri-dockerd.sock"
        dest: /tmp/kubeadm_join_cmd.sh
        mode: '0644'
      when: kubeadm_init.changed

    - name: Fetch join command
      fetch:
        src: /tmp/kubeadm_join_cmd.sh
        dest: ./kubeadm_join_cmd.sh
        flat: yes
      when: kubeadm_init.changed

    - name: Create .kube directory for current user
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Install Calico network plugin
      become: no
      shell: |
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/tigera-operator.yaml
        curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/custom-resources.yaml -O
        # Adjust CIDR if needed based on pod_network_cidr
        {% if pod_network_cidr == "10.244.0.0/16" %}
        sed -i 's|192.168.0.0/16|10.244.0.0/16|g' custom-resources.yaml
        {% endif %}
        kubectl create -f custom-resources.yaml
      args:
        chdir: "/home/{{ ansible_user }}"
      register: calico_result
      changed_when: "'created' in calico_result.stdout"
      failed_when: false

    - name: Install metrics server
      become: no
      block:
        - name: Clone metrics server repository
          git:
            repo: https://github.com/mialeevs/kubernetes_installation_docker.git
            dest: "/home/{{ ansible_user }}/kubernetes_installation_docker"
            
        - name: Apply metrics server
          shell: kubectl apply -f metrics-server.yaml
          args:
            chdir: "/home/{{ ansible_user }}/kubernetes_installation_docker"
            
        - name: Clean up repository
          file:
            path: "/home/{{ ansible_user }}/kubernetes_installation_docker"
            state: absent

    - name: Install Helm
      shell: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod +x get_helm.sh
        ./get_helm.sh
      args:
        creates: /usr/local/bin/helm

    - name: Add Kubernetes Dashboard Helm repository
      become: no
      shell: helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      changed_when: false

    - name: Install Kubernetes Dashboard
      become: no
      shell: >
        helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard 
        --create-namespace --namespace kubernetes-dashboard
      changed_when: false

    - name: Expose Kubernetes Dashboard as NodePort
      become: no
      shell: >
        kubectl expose deployment kubernetes-dashboard-kong 
        --name k8s-dash-svc --type NodePort --port 443 --target-port 8443 
        -n kubernetes-dashboard
      failed_when: false

    - name: Create Dashboard admin user and role
      become: no
      copy:
        dest: "/home/{{ ansible_user }}/k8s-dash.yaml"
        content: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: kube-system
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: admin-user
            namespace: kube-system
        mode: '0644'

    - name: Apply Dashboard admin user and role
      become: no
      shell: kubectl apply -f k8s-dash.yaml
      args:
        chdir: "/home/{{ ansible_user }}"
      changed_when: false

    - name: Get token for Dashboard login
      become: no
      shell: kubectl -n kube-system create token admin-user --duration=168h
      register: dashboard_token
      changed_when: false

    - name: Display Dashboard token
      debug:
        msg: "Dashboard Login Token: {{ dashboard_token.stdout }}"

    - name: Get NodePort for Dashboard
      become: no
      shell: kubectl get svc k8s-dash-svc -n kubernetes-dashboard -o jsonpath='{.spec.ports[0].nodePort}'
      register: dashboard_port
      changed_when: false
      failed_when: false

    - name: Display Dashboard access information
      debug:
        msg: 
          - "Dashboard available at: https://{{ master_ip.stdout }}:{{ dashboard_port.stdout }}"
          - "Use the token above to log in"
      when: dashboard_port.rc == 0

- name: Join worker nodes to the cluster
  hosts: workers
  become: yes
  tasks:
    - name: Check if node is already joined
      shell: kubectl get nodes | grep {{ inventory_hostname }}
      register: node_check
      delegate_to: "{{ groups['master'][0] }}"
      failed_when: false
      changed_when: false
      ignore_errors: yes

    - name: Copy join command from master
      copy:
        src: ./kubeadm_join_cmd.sh
        dest: /tmp/kubeadm_join_cmd.sh
        mode: '0755'
      when: node_check.rc != 0

    - name: Join the cluster
      shell: sh /tmp/kubeadm_join_cmd.sh
      when: node_check.rc != 0