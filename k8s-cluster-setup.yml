---
- name: Setup prerequisites on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Update apt cache and install required packages
      apt:
        update_cache: yes
        name:
          - git
          - wget
          - curl
          - socat
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

- name: Install Docker on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.key

    - name: Import Docker GPG key and export to archive
      shell: |
        gpg --no-default-keyring --keyring /tmp/docker.gpg --import /tmp/docker.key
        gpg --no-default-keyring --keyring /tmp/docker.gpg --export > /tmp/docker-archive-keyring.gpg
      args:
        executable: /bin/bash

    - name: Move Docker keyring to trusted location
      copy:
        src: /tmp/docker-archive-keyring.gpg
        dest: /etc/apt/trusted.gpg.d/docker-archive-keyring.gpg
        remote_src: yes

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present

- name: Install cri-dockerd on all nodes
  hosts: all
  become: yes
  vars:
    cri_dockerd_api_url: "https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest"
  tasks:
    - name: Get latest cri-dockerd release info
      uri:
        url: "{{ cri_dockerd_api_url }}"
        return_content: yes
      register: cri_release_info

    - name: Set cri-dockerd version variable
      set_fact:
        cri_dockerd_version: "{{ cri_release_info.json.tag_name | regex_replace('^v','') }}"

    - name: Download cri-dockerd tarball
      get_url:
        url: "https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"
        dest: "/tmp/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"

    - name: Extract cri-dockerd tarball
      unarchive:
        src: "/tmp/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"
        dest: /tmp/
        remote_src: yes

    - name: Move cri-dockerd binary to /usr/local/bin
      copy:
        src: "/tmp/cri-dockerd/cri-dockerd"
        dest: /usr/local/bin/cri-dockerd
        mode: '0755'
        remote_src: yes

    - name: Download cri-dockerd systemd service file
      get_url:
        url: "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service"
        dest: /etc/systemd/system/cri-docker.service
      notify: Reload systemd

    - name: Download cri-dockerd socket file
      get_url:
        url: "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket"
        dest: /etc/systemd/system/cri-docker.socket
      notify: Reload systemd

    - name: Update cri-docker.service file with correct path
      replace:
        path: /etc/systemd/system/cri-docker.service
        regexp: "/usr/bin/cri-dockerd"
        replace: "/usr/local/bin/cri-dockerd"
      notify: Reload systemd

    - name: Enable and start cri-dockerd service
      systemd:
        name: cri-docker.service
        enabled: yes
        state: started

    - name: Enable and start cri-dockerd socket
      systemd:
        name: cri-docker.socket
        enabled: yes
        state: started

- name: Install Kubernetes components on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Create apt keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Add Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
        dest: /tmp/k8s_release.key

    - name: Convert Kubernetes key to apt-keyring format
      shell: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/k8s_release.key"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      copy:
        content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
        dest: /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes packages to prevent automatic updates
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: hold

- name: Configure system for Kubernetes on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Load required kernel modules
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Ensure kernel modules are loaded
      shell: |
        modprobe overlay
        modprobe br_netfilter
      args:
        warn: false

    - name: Set sysctl params for Kubernetes
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1

    - name: Apply sysctl params
      command: sysctl --system

    - name: Disable swap immediately
      command: swapoff -a

    - name: Disable swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*swap.*)$'
        replace: '# \1'

- name: Initialize Kubernetes control-plane (Master)
  hosts: control_plane
  become: yes
  vars:
    # Automatically determine the control-plane IP from the default interface
    control_plane_ip: "{{ ansible_default_ipv4.address }}"
    # Set pod network CIDR conditionally to avoid conflict with host network
    pod_network_cidr: >-
      {% if '192.168.' in ansible_default_ipv4.address %}
        10.244.0.0/16
      {% else %}
        192.168.0.0/16
      {% endif %}
  tasks:
    - name: Initialize Kubernetes cluster with kubeadm
      shell: |
        kubeadm init --apiserver-advertise-address={{ control_plane_ip }} \
        --cri-socket unix:///var/run/cri-dockerd.sock \
        --pod-network-cidr={{ pod_network_cidr }} | tee /tmp/kubeadm_init.out
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init_output

    - name: Save kubeadm join command
      shell: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Display join command
      debug:
        msg: "Use the following command on worker nodes to join the cluster: {{ join_command.stdout }}"

    - name: Set up kubeconfig for the current user
      become: yes
      become_user: "{{ ansible_user }}"
      shell: |
        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
      args:
        executable: /bin/bash

    - name: Deploy Calico network plugin
      shell: |
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/tigera-operator.yaml
        curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/custom-resources.yaml
        kubectl create -f custom-resources.yaml
      args:
        executable: /bin/bash

- name: Join worker nodes to the cluster
  hosts: worker
  become: yes
  vars:
    # Retrieve the join command saved on the first control-plane node
    join_command: "{{ hostvars[groups['control_plane'][0]].join_command.stdout }}"
  tasks:
    - name: Join the cluster using kubeadm join command
      shell: "{{ join_command }} --cri-socket unix:///var/run/cri-dockerd.sock"
      args:
        creates: /etc/kubernetes/kubelet.conf

- handlers:
  - name: Reload systemd
    systemd:
      daemon_reload: yes
